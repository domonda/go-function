package gen

import (
	"bytes"
	"fmt"
	"go/ast"
	"io/ioutil"
	"path/filepath"
	"sort"
	"strings"

	"golang.org/x/tools/imports"
)

func PackageFunctions(pkgDir, genFilename, namePrefix string, printOnly bool, onlyFuncs ...string) error {
	pkgName, funcs, err := parsePackage(pkgDir, genFilename, onlyFuncs...)
	if err != nil {
		return err
	}

	importLines := map[string]struct{}{
		`"reflect"`: {},
		`"context"`: {},
		`function "github.com/domonda/go-function"`: {},
	}
	for _, fun := range funcs {
		err = getFunctionImports(fun.File, fun.Decl.Type, importLines)
		if err != nil {
			return err
		}
	}
	var sortedImportLines []string
	for l := range importLines {
		sortedImportLines = append(sortedImportLines, l)
	}
	sort.Strings(sortedImportLines)

	b := bytes.NewBuffer(nil)

	fmt.Fprintf(b, "// This file has been AUTOGENERATED!\n\n")
	fmt.Fprintf(b, "package %s\n\n", pkgName)
	if len(sortedImportLines) > 0 {
		fmt.Fprintf(b, "import (\n")
		for _, importLine := range sortedImportLines {
			fmt.Fprintf(b, "\t%s\n", importLine)
		}
		fmt.Fprintf(b, ")\n\n")
	}

	for funName, fun := range funcs {
		err = ImplWrapper.WriteFunction(b, fun.File, fun.Decl, namePrefix+funName, "")
		if err != nil {
			return err
		}
	}

	genFileData := b.Bytes()
	genFilePath := filepath.Join(pkgDir, genFilename)

	imports.LocalPrefix = "github.com/domonda/"
	genFileData, err = imports.Process(genFilePath, genFileData, &imports.Options{Comments: true, FormatOnly: true})
	if err != nil {
		return err
	}

	if printOnly {
		fmt.Println(genFileData)
	} else {
		fmt.Println("Writing file", genFilePath)
		err = ioutil.WriteFile(genFilePath, genFileData, 0660)
		if err != nil {
			return err
		}
	}
	// err = exec.Command("gofmt", "-s", "-w", genFile).Run()
	// if err != nil {
	// 	return err
	// }

	return nil
}

func getFunctionImports(file *ast.File, funcType *ast.FuncType, outImportLines map[string]struct{}) error {
	funcSelectors := make(map[string]struct{})
	recursiveExprSelectors(funcType, funcSelectors)
	// fmt.Println(funcSelectors)
	for _, imp := range file.Imports {
		if imp.Name != nil {
			if _, ok := funcSelectors[imp.Name.Name]; ok {
				delete(outImportLines, imp.Path.Value)
				outImportLines[imp.Name.Name+" "+imp.Path.Value] = struct{}{}
			}
			continue
		}
		guessedName, err := guessPackageNameFromPath(imp.Path.Value)
		if err != nil {
			return err
		}
		if _, ok := funcSelectors[guessedName]; ok {
			if _, ok = outImportLines[guessedName+" "+imp.Path.Value]; !ok {
				outImportLines[imp.Path.Value] = struct{}{}
			}
		}
	}
	return nil
}

func guessPackageNameFromPath(path string) (string, error) {
	pkg := path
	if len(pkg) >= 2 && pkg[0] == '"' && pkg[len(pkg)-1] == '"' {
		pkg = pkg[1 : len(pkg)-1]
	}
	pkg = pkg[strings.LastIndex(pkg, "/")+1:]
	pkg = strings.TrimPrefix(pkg, "go-")
	pkg = strings.TrimSuffix(pkg, ".go")
	if pkg == "" || strings.ContainsAny(pkg, ".-") {
		return "", fmt.Errorf("could not guess package name from import path %s", path)
	}
	return pkg, nil
}
